name: Bunnyshell - Deploy Preview Environment
on:
  workflow_run:
    workflows:
      - "Bunnyshell - Prepare Preview Environment Configuration"
    types:
      - completed
permissions:
  pull-requests: write
jobs:
  load-artifact-from-reusable:
    name: Load artifact values
    uses: bunnyshell/workflows/.github/workflows/load-artifact.yaml@v2
    with:
      workflow_run_id: ${{ github.event.workflow_run.id }}

  deploy:
    name: Deploy Environment
    needs: load-artifact-from-reusable
    uses: bunnyshell/workflows/.github/workflows/deploy-env.yaml@v2
    concurrency: bns-deploy-${{ needs.load-artifact-from-reusable.outputs.pr-number }}
    if: ${{ github.event.workflow_run.conclusion == 'success' && needs.load-artifact-from-reusable.outputs.skip-deployment == 'false' }}
    with:
      pr-number: ${{ needs.load-artifact-from-reusable.outputs.pr-number }}
      project-id: 2brqgVOXvp
      cluster-id: 8rGr7jJMlR
      env-name: "Demo PR #${{ needs.load-artifact-from-reusable.outputs.pr-number }}"
      bunnyshell-yaml-contents: "kind: Environment\nname: preview\ntype: primary\nurlHandle: pqrksq2344\ncomponents:\n    -\n        kind: Application\n        name: api\n        gitRepo: 'https://github.com/hugo8791/devops-hugo.git'\n        gitBranch: main\n        gitApplicationPath: Week1\n        dockerCompose:\n            build:\n                context: ./Week1\n                dockerfile: Dockerfile\n            environment:\n                MONGO_URL: 'mongodb://root:root@mongo:27017/'\n            ports:\n                - '3000:3000'\n        hosts:\n            -\n                hostname: 'api-{{ env.base_domain }}'\n                path: /\n                servicePort: 3000\n    -\n        kind: Database\n        name: db-exporter\n        dockerCompose:\n            command:\n                - '--collect-all'\n                - '--discovering-mode'\n            environment:\n                MONGODB_URI: 'mongodb://root:root@mongo:27017/'\n            image: 'bitnami/mongodb-exporter:latest'\n            ports:\n                - '9216:9216'\n    -\n        kind: Database\n        name: db-exporter-doc\n        dockerCompose:\n       ame: mongo\n        dockerCompose:\n            environment:\n                MONGO_INITDB_ROOT_PASSWORD: root\n                MONGO_INITDB_ROOT_USERNAME: root\n            image: mongo\n            ports:\n                - '27017:27017'\n            restart: always\n        volumes:\n            -\n                name: mongo-data\n                mount: /data/db\n                subPath: ''\n    -\n        kind: Database\n        name: mongodoc\n        dockerCompose:\n            environment:\n                MONGO_INITDB_ROOT_PASSWORD: root\n                MONGO_INITDB_ROOT_USERNAME: root\n            image: mongo\n            ports:\n                - '27018:27017'\n            restart: always\n        volumes:\n            -\n                name: mongo-data-doc\n                mount: /data/db\n                subPath: ''\n    -\n        kind: Application\n        name: prometheus\n        gitRepo: 'https://github.com/hugo8791/devops-hugo.git'\n        gitBranch: main\n        gitApplicationPath: Week1/prom_volume\n        dockerCompose:\n            build:\n                context: ./Week1/prom_volume\n                dockerfile: Dockerfile\n            command:\n                - '--web.enable-lifecycle'\n                - '--config.file=/etc/prometheus/prometheus.yml'\n            ports:\n                - '9090:9090'\n        hosts:\n            -\n                hostname: 'prometheus-{{ env.base_domain }}'\n                path: /\n                servicePort: 9090\nvolumes:\n    -\n        name: mongo-data\n        size: 1Gi\n        type: disk\n    -\n        name: mongo-data-doc\n        size: 1Gi\n        type: disk"
      comment-on-pr: true
    secrets:
      bunnyshell-access-token: ${{ secrets.BUNNYSHELL_TOKEN }}
